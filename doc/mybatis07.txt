7,ResultSetHandler介绍（mapper如何将数据库数据转换成java对象的）
ResultSetHandler唯一实现类：DefaultResultSetHandler
public class DefaultResultSetHandler implements ResultSetHandler {
    public List<Object> handleResultSets(Statement stmt) throws SQLException {
        ErrorContext.instance().activity("handling results").object(mappedStatement.getId());
        final List<Object> multipleResults = new ArrayList<>();
        int resultSetCount = 0;
        // 获取第一个结果值，并将Statement里的ResultSet包装成ResultSetWrapper对象
        // 包含数据库表列名/类型，java对象字段类型等信息
        ResultSetWrapper rsw = getFirstResultSet(stmt);
        // 结果映射集，在UserMapper.xml中resultMap标签配置的，存储过程可能有多个
        List<ResultMap> resultMaps = mappedStatement.getResultMaps();
        int resultMapCount = resultMaps.size();
        // 校验是否有配置结果映射。如果rsw不为null，resultMaps长度为0，则抛出异常
        validateResultMapsCount(rsw, resultMapCount);
        while (rsw != null && resultMapCount > resultSetCount) {
            // 遍历获取每一个resultMap进行结果映射
            ResultMap resultMap = resultMaps.get(resultSetCount);
            // 处理结果，并把结果存入multipleResults容器
            handleResultSet(rsw, resultMap, multipleResults, null);
            // 获取下一个结果集
            rsw = getNextResultSet(stmt);
            // 结果处理后清空嵌套结果对象
            cleanUpAfterHandlingResultSet();
            resultSetCount++;
        }
        // 适用多结果集情况，UserMapper.xml文件中select标签上resultSets属性，一般出现在存储过程中
        String[] resultSets = mappedStatement.getResultSets();
        if (resultSets != null) {
            while (rsw != null && resultSetCount < resultSets.length) {
                ResultMapping parentMapping = nextResultMaps.get(resultSets[resultSetCount]);
                if (parentMapping != null) {
                    String nestedResultMapId = parentMapping.getNestedResultMapId();
                    ResultMap resultMap = configuration.getResultMap(nestedResultMapId);
                    handleResultSet(rsw, resultMap, null, parentMapping);
                }
                rsw = getNextResultSet(stmt);
                cleanUpAfterHandlingResultSet();
                resultSetCount++;
            }
        }
        // 如果multipleResults只有一个元素，则取出强转为List<Object>返回，否则直接返回multipleResults对象
        return collapseSingleResultList(multipleResults);
    }
    private void handleResultSet(ResultSetWrapper rsw, ResultMap resultMap, List<Object> multipleResults, ResultMapping parentMapping) throws SQLException {
        try {
            // parentMapping是否为null，即设置的是resultMap还是resultSets
            if (parentMapping != null) {
                // 处理多行结果
                handleRowValues(rsw, resultMap, null, RowBounds.DEFAULT, parentMapping);
            } else {
                // 如果没有自定义的resultHandler，则创建默认的DefaultResultHandler对象
                if (resultHandler == null) {
                    // 创建DefaultResultHandler对象，承装解析后的结果集（java对象）
                    DefaultResultHandler defaultResultHandler = new DefaultResultHandler(objectFactory);
                    handleRowValues(rsw, resultMap, defaultResultHandler, rowBounds, null);
                    // 取出defaultResultHandler中存放的结果列表，存入到multipleResults中
                    multipleResults.add(defaultResultHandler.getResultList());
                } else {
                    handleRowValues(rsw, resultMap, resultHandler, rowBounds, null);
                }
            }
        } finally {
            // issue #228 (close resultsets)
            // 关闭ResultSet对象
            closeResultSet(rsw.getResultSet());
        }
    }
    public void handleRowValues(ResultSetWrapper rsw, ResultMap resultMap, ResultHandler<?> resultHandler, RowBounds rowBounds, ResultMapping parentMapping) throws SQLException {
        // 处理嵌套映射的情况，一对一association标签，一对多collection标签
        if (resultMap.hasNestedResultMaps()) {
            // RowBounds无法安全地约束具有嵌套结果映射的映射语句
            // 可配置文件中设置safeRowBoundsEnabled=false跳过此检查
            ensureNoRowBounds();
            // 带有嵌套结果映射的映射语句不能与自定义ResultHandler一起安全使用
            // 可配置文件中设置safeResultHandlerEnabled=false跳过此检查，或确保返回有序数据并在其上设置resultOrdered=true
            checkResultHandler();
            // 处理嵌套映射结果
            handleRowValuesForNestedResultMap(rsw, resultMap, resultHandler, rowBounds, parentMapping);
        } else {
            // 处理普通映射结果
            handleRowValuesForSimpleResultMap(rsw, resultMap, resultHandler, rowBounds, parentMapping);
        }
    }
    private void handleRowValuesForSimpleResultMap(ResultSetWrapper rsw, ResultMap resultMap, ResultHandler<?> resultHandler, RowBounds rowBounds, ResultMapping parentMapping)
            throws SQLException {
        // 承装每一次解析的结果，并记录已解析结果数
        DefaultResultContext<Object> resultContext = new DefaultResultContext<>();
        // 获取结果集
        ResultSet resultSet = rsw.getResultSet();
        // 跳到需要分页时指定的行数
        skipRows(resultSet, rowBounds);
        // resultContext是否关闭或者是超分页limit，resultSet是否关闭及是否有下一条结果
        while (shouldProcessMoreRows(resultContext, rowBounds) && !resultSet.isClosed() && resultSet.next()) {
            // 获取需要映射使用的resultMap
            ResultMap discriminatedResultMap = resolveDiscriminatedResultMap(resultSet, resultMap, null);
            // 根据获取的resultMap将结果集resultSet中一行结果映射为java对象（while循环获取每一行）
            Object rowValue = getRowValue(rsw, discriminatedResultMap, null);
            // 将映射得到的结果（Java对象）添加到DefaultResultHandler对象的list中
            storeObject(resultHandler, resultContext, rowValue, parentMapping, resultSet);
        }
    }
    private Object getRowValue(ResultSetWrapper rsw, ResultMap resultMap, String columnPrefix) throws SQLException {
        // 初始化懒加载相关容器
        final ResultLoaderMap lazyLoader = new ResultLoaderMap();
        // 创建结果对象，只是初始化并未赋值
        Object rowValue = createResultObject(rsw, resultMap, lazyLoader, columnPrefix);
        // 结果对象初始化成功，并且判断rowValue是否是基本数据类型，获取其类型转换器TypeHandler，为null则跳过下面逻辑，直接返回
        if (rowValue != null && !hasTypeHandlerForResultObject(rsw, resultMap.getType())) {
            // 元数据对象(MetaObject)实际上是提供Bean,Collection,Map的一种自动识别的访问形式
            // 核心是其内属性：对象包装器ObjectWrapper,提供了对Bean,Collection,Map不同的操作方式
            // 推荐学习https://blog.csdn.net/mz4138/article/details/81671319
            final MetaObject metaObject = configuration.newMetaObject(rowValue);
            // 判断是否有属性映射成功，如果有则返回true
            boolean foundValues = this.useConstructorMappings;
            // 是否自动映射可以在settings标签中设置
            // Mybatis对结果集进行处理时都是通过resultMap进行处理的。
            // 当指定的是resultType时，Mybatis内部会生成一个空的resultMap，赋值其type为resultType类型，然后自动映射
            if (shouldApplyAutomaticMappings(resultMap, false)) {
                // 自动映射未指定的映射列
                foundValues = applyAutomaticMappings(rsw, resultMap, metaObject, columnPrefix) || foundValues;
            }
            // 映射resultMap中指定映射的列
            foundValues = applyPropertyMappings(rsw, resultMap, metaObject, lazyLoader, columnPrefix) || foundValues;
            foundValues = lazyLoader.size() > 0 || foundValues;
            // 当返回行的所有列都是空时，MyBatis默认返回null。当设置ReturnInstanceForEmptyRow为true时，MyBatis会返回一个空实例
            rowValue = foundValues || configuration.isReturnInstanceForEmptyRow() ? rowValue : null;
        }
        return rowValue;
    }
    private Object createResultObject(ResultSetWrapper rsw, ResultMap resultMap, ResultLoaderMap lazyLoader, String columnPrefix) throws SQLException {
        this.useConstructorMappings = false; // reset previous mapping result
        final List<Class<?>> constructorArgTypes = new ArrayList<>();
        final List<Object> constructorArgs = new ArrayList<>();
        // 获取resultMap的type属性创建返回结果对象
        Object resultObject = createResultObject(rsw, resultMap, constructorArgTypes, constructorArgs, columnPrefix);
        // 结果对象初始化成功，并且判断rowValue是否是基本数据类型，获取其类型转换器TypeHandler，为null则跳过下面逻辑，直接返回
        if (resultObject != null && !hasTypeHandlerForResultObject(rsw, resultMap.getType())) {
            // 获取resultMap标签中列的映射信息
            final List<ResultMapping> propertyMappings = resultMap.getPropertyResultMappings();
            for (ResultMapping propertyMapping : propertyMappings) {
                // issue gcode #109 && issue #149
                // 判断属性有没配置嵌套查询，如果有就创建代理对象
                if (propertyMapping.getNestedQueryId() != null && propertyMapping.isLazy()) {
                    resultObject = configuration.getProxyFactory().createProxy(resultObject, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);
                    break;
                }
            }
        }
        this.useConstructorMappings = resultObject != null && !constructorArgTypes.isEmpty(); // set current mapping result
        return resultObject;
    }
    private boolean applyAutomaticMappings(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject, String columnPrefix) throws SQLException {
        // 列的自动映射结果
        List<UnMappedColumnAutoMapping> autoMapping = createAutomaticMappings(rsw, resultMap, metaObject, columnPrefix);
        boolean foundValues = false;
        // 自动映射成功
        if (!autoMapping.isEmpty()) {
            for (UnMappedColumnAutoMapping mapping : autoMapping) {
                // 获取结果中对应列的值
                final Object value = mapping.typeHandler.getResult(rsw.getResultSet(), mapping.column);
                // 只要有属性映射成功，则设置为true
                if (value != null) {
                    foundValues = true;
                }
                // callSettersOnNulls可以在settings标签中设置，默认值false，详见配置文件
                if (value != null || (configuration.isCallSettersOnNulls() && !mapping.primitive)) {
                    // gcode issue #377, call setter on nulls (value is not 'found')
                    // 通过元数据对象(MetaObject)给结果对象赋值
                    metaObject.setValue(mapping.property, value);
                }
            }
        }
        return foundValues;
    }
    private boolean applyPropertyMappings(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject, ResultLoaderMap lazyLoader, String columnPrefix)
            throws SQLException {
        // 获取ResultMap中的映射列名
        final List<String> mappedColumnNames = rsw.getMappedColumnNames(resultMap, columnPrefix);
        boolean foundValues = false;
        // 获取resultMap标签中列的映射信息
        final List<ResultMapping> propertyMappings = resultMap.getPropertyResultMappings();
        for (ResultMapping propertyMapping : propertyMappings) {
            String column = prependPrefix(propertyMapping.getColumn(), columnPrefix);
            // 是否配置嵌套查询
            if (propertyMapping.getNestedResultMapId() != null) {
                // the user added a column attribute to a nested result map, ignore it
                column = null;
            }
            if (propertyMapping.isCompositeResult()
                    || (column != null && mappedColumnNames.contains(column.toUpperCase(Locale.ENGLISH)))
                    || propertyMapping.getResultSet() != null) {
                // 获取该列的值
                Object value = getPropertyMappingValue(rsw.getResultSet(), metaObject, propertyMapping, lazyLoader, columnPrefix);
                // issue #541 make property optional
                // 获取映射的返回结果对象属性名
                final String property = propertyMapping.getProperty();
                if (property == null) {
                    continue;
                } else if (value == DEFERRED) {
                    foundValues = true;
                    continue;
                }
                if (value != null) {
                    foundValues = true;
                }
                if (value != null || (configuration.isCallSettersOnNulls() && !metaObject.getSetterType(property).isPrimitive())) {
                    // gcode issue #377, call setter on nulls (value is not 'found')
                    // 通过元数据对象(MetaObject)给结果对象赋值
                    metaObject.setValue(property, value);
                }
            }
        }
        return foundValues;
    }
    private List<UnMappedColumnAutoMapping> createAutomaticMappings(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject, String columnPrefix) throws SQLException {
        final String mapKey = resultMap.getId() + ":" + columnPrefix;
        // 从映射缓存容器中获取
        List<UnMappedColumnAutoMapping> autoMapping = autoMappingsCache.get(mapKey);
        if (autoMapping == null) {
            // 缓存中没有，则初始化
            autoMapping = new ArrayList<>();
            // 未指定映射的列名
            final List<String> unmappedColumnNames = rsw.getUnmappedColumnNames(resultMap, columnPrefix);
            for (String columnName : unmappedColumnNames) {
                // 未指定映射，则结果对象属性名为列名
                String propertyName = columnName;
                if (columnPrefix != null && !columnPrefix.isEmpty()) {
                    // When columnPrefix is specified, 当指定列前缀
                    // ignore columns without the prefix. 忽略没有前缀的列
                    if (columnName.toUpperCase(Locale.ENGLISH).startsWith(columnPrefix)) {
                        propertyName = columnName.substring(columnPrefix.length());
                    } else {
                        continue;
                    }
                }
                // 通过元数据对象(MetaObject)获取属性名
                final String property = metaObject.findProperty(propertyName, configuration.isMapUnderscoreToCamelCase());
                // 如果属性为空，并且允许set赋值操作
                if (property != null && metaObject.hasSetter(property)) {
                    // 如果在resultMap标签有指定列的映射，则跳过
                    if (resultMap.getMappedProperties().contains(property)) {
                        continue;
                    }
                    // 属性的类型
                    final Class<?> propertyType = metaObject.getSetterType(property);
                    // 类型处理器注册器typeHandlerRegistry中是否有该属性类型处理器
                    if (typeHandlerRegistry.hasTypeHandler(propertyType, rsw.getJdbcType(columnName))) {
                        // 获取该属性类型处理器
                        final TypeHandler<?> typeHandler = rsw.getTypeHandler(propertyType, columnName);
                        // 创建UnMappedColumnAutoMapping对象并存入autoMapping容器
                        autoMapping.add(new UnMappedColumnAutoMapping(columnName, property, typeHandler, propertyType.isPrimitive()));
                    } else {
                        configuration.getAutoMappingUnknownColumnBehavior()
                                .doAction(mappedStatement, columnName, property, propertyType);
                    }
                } else {
                    configuration.getAutoMappingUnknownColumnBehavior()
                            .doAction(mappedStatement, columnName, (property != null) ? property : propertyName, null);
                }
            }
            // 存入映射缓存容器中
            autoMappingsCache.put(mapKey, autoMapping);
        }
        return autoMapping;
    }
}
