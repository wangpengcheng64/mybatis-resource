4，mapper执行增删改查操作
public class MapperMethod {
    // 增删改查方法执行（下节解析）
    public Object execute(SqlSession sqlSession, Object[] args) {
        Object result;
        switch (command.getType()) {
            case INSERT: {  // 新增
                // 参数处理
                Object param = method.convertArgsToSqlCommandParam(args);
                // 调用sqlSession的insert方法
                result = rowCountResult(sqlSession.insert(command.getName(), param));
                break;
            }
            case UPDATE: {  // 更新
                Object param = method.convertArgsToSqlCommandParam(args);
                result = rowCountResult(sqlSession.update(command.getName(), param));
                break;
            }
            case DELETE: {  // 删除
                Object param = method.convertArgsToSqlCommandParam(args);
                result = rowCountResult(sqlSession.delete(command.getName(), param));
                break;
            }
            case SELECT:    // 查询
                // 无返回值且有ResultHandler参数
                if (method.returnsVoid() && method.hasResultHandler()) {
                    executeWithResultHandler(sqlSession, args);
                    result = null;
                // 返回多个结果（List）
                } else if (method.returnsMany()) {
                    result = executeForMany(sqlSession, args);
                // 返回值是Map
                } else if (method.returnsMap()) {
                    result = executeForMap(sqlSession, args);
                // 返回值是游标类型
                } else if (method.returnsCursor()) {
                    result = executeForCursor(sqlSession, args);
                } else {
                    // 默认返回单个值的
                    Object param = method.convertArgsToSqlCommandParam(args);
                    result = sqlSession.selectOne(command.getName(), param);
                    if (method.returnsOptional() &&
                            (result == null || !method.getReturnType().equals(result.getClass()))) {
                        result = Optional.ofNullable(result);
                    }
                }
                break;
            case FLUSH: //将请求刷新到数据库，清除缓存
                result = sqlSession.flushStatements();
                break;
            default: // 接口方法与sql绑定异常
                throw new BindingException("Unknown execution method for: " + command.getName());
        }
        // 如果结果为null，返回值为基本数据类型，且返回值不为空的
        if (result == null && method.getReturnType().isPrimitive() && !method.returnsVoid()) {
            throw new BindingException("Mapper method '" + command.getName()
                    + " attempted to return null from a method with a primitive return type (" + method.getReturnType() + ").");
        }
        return result;
    }

    // 增删改操作影响的行数
    private Object rowCountResult(int rowCount) {
        final Object result;
        if (method.returnsVoid()) {
            result = null;
        } else if (Integer.class.equals(method.getReturnType()) || Integer.TYPE.equals(method.getReturnType())) {
            result = rowCount;
        } else if (Long.class.equals(method.getReturnType()) || Long.TYPE.equals(method.getReturnType())) {
            result = (long)rowCount;
        } else if (Boolean.class.equals(method.getReturnType()) || Boolean.TYPE.equals(method.getReturnType())) {
            result = rowCount > 0;
        } else {
            throw new BindingException("Mapper method '" + command.getName() + "' has an unsupported return type: " + method.getReturnType());
        }
        return result;
    }
    // 无返回值且有ResultHandler参数
    private void executeWithResultHandler(SqlSession sqlSession, Object[] args) {
        // 获取MappedStatement对象
        MappedStatement ms = sqlSession.getConfiguration().getMappedStatement(command.getName());
        if (!StatementType.CALLABLE.equals(ms.getStatementType())
                && void.class.equals(ms.getResultMaps().get(0).getType())) {
            throw new BindingException("method " + command.getName()
                    + " needs either a @ResultMap annotation, a @ResultType annotation,"
                    + " or a resultType attribute in XML so a ResultHandler can be used as a parameter.");
        }
        // 参数处理
        Object param = method.convertArgsToSqlCommandParam(args);
        // 是否需要分页
        if (method.hasRowBounds()) {
            RowBounds rowBounds = method.extractRowBounds(args);
            // 执行sqlSession的select方法
            sqlSession.select(command.getName(), param, rowBounds, method.extractResultHandler(args));
        } else {
            sqlSession.select(command.getName(), param, method.extractResultHandler(args));
        }
    }
    // 返回多个结果（List）
    private <E> Object executeForMany(SqlSession sqlSession, Object[] args) {
        List<E> result;
        Object param = method.convertArgsToSqlCommandParam(args);
        if (method.hasRowBounds()) {
            RowBounds rowBounds = method.extractRowBounds(args);
            result = sqlSession.<E>selectList(command.getName(), param, rowBounds);
        } else {
            result = sqlSession.<E>selectList(command.getName(), param);
        }
        // issue #510 Collections & arrays support
        // isAssignableFrom方法，用来判断两个类的之间的关联关系，也可以说是一个类是否可以被强制转换为另外一个实例对象
        if (!method.getReturnType().isAssignableFrom(result.getClass())) {
            if (method.getReturnType().isArray()) { // 数组类型
                return convertToArray(result);
            } else { // 转换为声明的集合类型
                return convertToDeclaredCollection(sqlSession.getConfiguration(), result);
            }
        }
        return result;
    }
    // 返回值是游标类型
    private <T> Cursor<T> executeForCursor(SqlSession sqlSession, Object[] args) {
        Cursor<T> result;
        Object param = method.convertArgsToSqlCommandParam(args);
        if (method.hasRowBounds()) {
            RowBounds rowBounds = method.extractRowBounds(args);
            result = sqlSession.<T>selectCursor(command.getName(), param, rowBounds);
        } else {
            result = sqlSession.<T>selectCursor(command.getName(), param);
        }
        return result;
    }
    // 转换为声明的集合类型
    private <E> Object convertToDeclaredCollection(Configuration config, List<E> list) {
        Object collection = config.getObjectFactory().create(method.getReturnType());
        MetaObject metaObject = config.newMetaObject(collection);
        metaObject.addAll(list);
        return collection;
    }
    //
    @SuppressWarnings("unchecked")
    private <E> Object convertToArray(List<E> list) {
        // 获取数组的class对象类型
        Class<?> arrayComponentType = method.getReturnType().getComponentType();
        Object array = Array.newInstance(arrayComponentType, list.size());
        // 如果是基本数据类型
        if (arrayComponentType.isPrimitive()) {
            for (int i = 0; i < list.size(); i++) {
                Array.set(array, i, list.get(i));
            }
            return array;
        } else {
            return list.toArray((E[])array);
        }
    }
    // 返回值是Map
    private <K, V> Map<K, V> executeForMap(SqlSession sqlSession, Object[] args) {
        Map<K, V> result;
        Object param = method.convertArgsToSqlCommandParam(args);
        if (method.hasRowBounds()) {
            RowBounds rowBounds = method.extractRowBounds(args);
            result = sqlSession.selectMap(command.getName(), param, method.getMapKey(), rowBounds);
        } else {
            result = sqlSession.selectMap(command.getName(), param, method.getMapKey());
        }
        return result;
    }
    // 方法签名，封装了方法返回值/请求参数等信息
    public static class MethodSignature {
        // 将Args转换为SqlCommand参数
        public Object convertArgsToSqlCommandParam(Object[] args) {
            return paramNameResolver.getNamedParams(args);
        }
    }
}
// 参数解析
public class ParamNameResolver {
    // 获取参数列表
    public Object getNamedParams(Object[] args) {
        final int paramCount = names.size();
        // 无参数
        if (args == null || paramCount == 0) {
            return null;
        // 1个参数
        } else if (!hasParamAnnotation && paramCount == 1) {
            // 根据参数位置获取参数
            return args[names.firstKey()];
        } else {
            final Map<String, Object> param = new ParamMap<>();
            int i = 0;
            for (Map.Entry<Integer, String> entry : names.entrySet()) {
                // 参数列表（参数名：参数位置）
                param.put(entry.getValue(), args[entry.getKey()]);
                // 除了默认名称外，此方法还添加了通用名称（param1，param2）
                // add generic param names (param1, param2, ...)
                final String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + 1);
                // ensure not to overwrite parameter named with @Param  确保不覆盖以@Param命名的参数
                if (!names.containsValue(genericParamName)) {
                    // 根据参数位置获取参数
                    param.put(genericParamName, args[entry.getKey()]);
                }
                i++;
            }
            return param;
        }
    }
}
public class DefaultSqlSession implements SqlSession {
    @Override
    public int insert(String statement, Object parameter) {
        return update(statement, parameter);
    }
    @Override
    public int delete(String statement, Object parameter) {
        return update(statement, parameter);
    }
    @Override
    public int update(String statement, Object parameter) {
        try {
            dirty = true;
            MappedStatement ms = configuration.getMappedStatement(statement);
            // 主要是调用executor里的方法，下面是具体执行器executor的获取
            return executor.update(ms, wrapCollection(parameter));
        } catch (Exception e) {
            throw ExceptionFactory.wrapException("Error updating database.  Cause: " + e, e);
        } finally {
            ErrorContext.instance().reset();
        }
    }
    .....
}
public class Configuration { // 第二节有介绍
    public Executor newExecutor(Transaction transaction, ExecutorType executorType) {
        executorType = executorType == null ? defaultExecutorType : executorType;
        executorType = executorType == null ? ExecutorType.SIMPLE : executorType;
        Executor executor;
        // 根据不同的executorType来创建（配置文件中设置）
        // 默认的执行器。SIMPLE
        if (ExecutorType.BATCH == executorType) {
            executor = new BatchExecutor(this, transaction);
        } else if (ExecutorType.REUSE == executorType) {
            executor = new ReuseExecutor(this, transaction);
        } else {
            executor = new SimpleExecutor(this, transaction);
        }
        // 判断是否开启二级缓存，所以最终返回的是CachingExecutor对象
        if (cacheEnabled) {
            // 将上面获取的执行器传入
            executor = new CachingExecutor(executor);
        }
        executor = (Executor) interceptorChain.pluginAll(executor);
        return executor;
    }
}
