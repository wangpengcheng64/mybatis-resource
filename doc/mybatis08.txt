8，拦截器（Interceptor）的实现原理及自定义拦截器
// 自定义拦截器，需实现接口
public interface Interceptor {
    // 拦截方法，自定义逻辑
    Object intercept(Invocation invocation) throws Throwable;
    // 封装代理对象
    Object plugin(Object target);
    // Mybatis配置文件中属性操作
    void setProperties(Properties properties);
}

// 拦截器上的两个注解
@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
public @interface Intercepts {
    // 拦截列表
    Signature[] value();
}

@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target({})
public @interface Signature {
    // 拦截对象的类型
    Class<?> type();
    // 拦截方法
    String method();
    // 拦截方法的参数列表
    Class<?>[] args();
}

// 在mybatis配置文件plugins标签中配置拦截器
<plugins>
    <plugin interceptor="com.wpc.interceptor.SqlInterceptor"/>
</plugins>

// 拦截器加载
public class XMLConfigBuilder extends BaseBuilder {
    // 解析mybatis配置文件configuration标签，实际上是给configuration对象属性赋值，下面都是解析配置文件中configuration节点中各子节点属性
    private void parseConfiguration(XNode root) {
        try {
            //issue #117 read properties first
            propertiesElement(root.evalNode("properties")); // 读取引入外部配置文件
            Properties settings = settingsAsProperties(root.evalNode("settings")); // settting 标签中有很多属性，开启开启二级缓存/延迟加载等
            loadCustomVfs(settings);
            loadCustomLogImpl(settings);
            typeAliasesElement(root.evalNode("typeAliases")); // 实体别名设置
            pluginElement(root.evalNode("plugins")); // 主要作用简单说就是拦截映射语句执行过程进行拦截从而做出特定的操作
            ...
        } catch (Exception e) {
            throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
    }
    private void pluginElement(XNode parent) throws Exception {
        if (parent != null) {
            // 遍历所有子标签plugin
            for (XNode child : parent.getChildren()) {
                // 获取标签interceptor属性值 com.wpc.interceptor.SqlInterceptor
                String interceptor = child.getStringAttribute("interceptor");
                // 获取属性列表
                Properties properties = child.getChildrenAsProperties();
                // 通过反射获取自定义拦截器对象
                Interceptor interceptorInstance = (Interceptor) resolveClass(interceptor).newInstance();
                // 拦截器对象属性赋值
                interceptorInstance.setProperties(properties);
                // 将自定义拦截器加入到拦截器链中
                configuration.addInterceptor(interceptorInstance);
            }
        }
    }
}
// Mybatis拦截器只能拦截Executor、ParameterHandler、StatementHandler、ResultSetHandler四个对象里面的方法。
public class Configuration {
    // 拦截器链
    protected final InterceptorChain interceptorChain = new InterceptorChain();
    // 初始化参数处理器
    public ParameterHandler newParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {
        ParameterHandler parameterHandler = mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);
        parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);
        return parameterHandler;
    }
    // 初始化结果处理器
    public ResultSetHandler newResultSetHandler(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler,
                                                ResultHandler resultHandler, BoundSql boundSql) {
        ResultSetHandler resultSetHandler = new DefaultResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);
        resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);
        return resultSetHandler;
    }
    // 初始化sql处理器
    public StatementHandler newStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) {
        StatementHandler statementHandler = new RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);
        statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);
        return statementHandler;
    }
    //  初始化执行器
    public Executor newExecutor(Transaction transaction, ExecutorType executorType) {
           executorType = executorType == null ? defaultExecutorType : executorType;
           executorType = executorType == null ? ExecutorType.SIMPLE : executorType;
           Executor executor;
           // 根据不同的executorType来创建（配置文件中设置）
           // 默认的执行器。SIMPLE
           // 执行器重用 REUSE
           // 执行器重用语句 批量更新 BATCH
           if (ExecutorType.BATCH == executorType) {
             executor = new BatchExecutor(this, transaction);
           } else if (ExecutorType.REUSE == executorType) {
             executor = new ReuseExecutor(this, transaction);
           } else {
             executor = new SimpleExecutor(this, transaction);
           }
           // 判断是否开启二级缓存，后续介绍
           if (cacheEnabled) {
             executor = new CachingExecutor(executor);
           }
           // 通过责任链模式来生成代理对象
           executor = (Executor) interceptorChain.pluginAll(executor);
           return executor;
    }
    // 将拦截器加入到拦截器链
    public void addInterceptor(Interceptor interceptor) {
        interceptorChain.addInterceptor(interceptor);
    }
}
// 拦截器链
public class InterceptorChain {
    // 拦截器列表
    private final List<Interceptor> interceptors = new ArrayList<>();
    // 调用每个Interceptor的plugin方法，生成代理对象
    public Object pluginAll(Object target) {
        for (Interceptor interceptor : interceptors) {
            target = interceptor.plugin(target);
        }
        return target;
    }
    // 添加拦截器
    public void addInterceptor(Interceptor interceptor) {
        interceptors.add(interceptor);
    }
    // 获取拦截器列表
    public List<Interceptor> getInterceptors() {
        return Collections.unmodifiableList(interceptors);
    }
}

public class Plugin implements InvocationHandler {

    // 目标对象
    private final Object target;
    // 拦截器
    private final Interceptor interceptor;
    // 拦截对象及方法列表
    private final Map<Class<?>, Set<Method>> signatureMap;

    private Plugin(Object target, Interceptor interceptor, Map<Class<?>, Set<Method>> signatureMap) {
        this.target = target;
        this.interceptor = interceptor;
        this.signatureMap = signatureMap;
    }

    public static Object wrap(Object target, Interceptor interceptor) {
        // 解析@Intercepts注解，获取拦截对象及其对应的方法列表
        Map<Class<?>, Set<Method>> signatureMap = getSignatureMap(interceptor);
        // 获取目标对象类型
        Class<?> type = target.getClass();
        // 获取目标对象的接口列表（被指定拦截的接口）
        Class<?>[] interfaces = getAllInterfaces(type, signatureMap);
        if (interfaces.length > 0) {
            // 生成jdk动态代理对象
            return Proxy.newProxyInstance(
                    type.getClassLoader(),
                    interfaces,
                    new Plugin(target, interceptor, signatureMap));
        }
        return target;
    }

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        try {
            // 获取拦截方法列表
            Set<Method> methods = signatureMap.get(method.getDeclaringClass());
            // 判断当前方法是否拦截
            if (methods != null && methods.contains(method)) {
                // 执行拦截器逻辑
                return interceptor.intercept(new Invocation(target, method, args));
            }
            // 方法执行
            return method.invoke(target, args);
        } catch (Exception e) {
            throw ExceptionUtil.unwrapThrowable(e);
        }
    }
    // 解析@Intercepts注解，获取拦截对象及其对应的方法列表
    private static Map<Class<?>, Set<Method>> getSignatureMap(Interceptor interceptor) {
        // 获取拦截器上的Intercepts注解
        Intercepts interceptsAnnotation = interceptor.getClass().getAnnotation(Intercepts.class);
        // issue #251
        if (interceptsAnnotation == null) {
            throw new PluginException("No @Intercepts annotation was found in interceptor " + interceptor.getClass().getName());
        }
        // @Signature列表
        Signature[] sigs = interceptsAnnotation.value();
        Map<Class<?>, Set<Method>> signatureMap = new HashMap<>();
        for (Signature sig : sigs) {
            Set<Method> methods = signatureMap.computeIfAbsent(sig.type(), k -> new HashSet<>());
            try {
                // 通过@Signature注解信息获取Method
                Method method = sig.type().getMethod(sig.method(), sig.args());
                methods.add(method);
            } catch (NoSuchMethodException e) {
                throw new PluginException("Could not find method on " + sig.type() + " named " + sig.method() + ". Cause: " + e, e);
            }
        }
        return signatureMap;
    }
    // 获取目标对象的接口列表（被指定拦截的接口）
    private static Class<?>[] getAllInterfaces(Class<?> type, Map<Class<?>, Set<Method>> signatureMap) {
        Set<Class<?>> interfaces = new HashSet<>();
        while (type != null) {
            for (Class<?> c : type.getInterfaces()) {
                // 判断该接口是否在拦截列表
                if (signatureMap.containsKey(c)) {
                    interfaces.add(c);
                }
            }
            type = type.getSuperclass();
        }
        return interfaces.toArray(new Class<?>[interfaces.size()]);
    }
}
