5,执行器之Executor介绍
Executor分成两大类，一是CacheExecutor，二是普通Executor（SimpleExecutor，ReuseExecutor，BatchExecutor，都继承BaseExecutor）。
public class CachingExecutor implements Executor {
    // 初始化时保存的普通Executor（默认为SimpleExecutor）
    private final Executor delegate;
    // 二级缓存容器
    private final TransactionalCacheManager tcm = new TransactionalCacheManager();
    // 构造方法
    public CachingExecutor(Executor delegate) {
        this.delegate = delegate;
        delegate.setExecutorWrapper(this);
    }
    @Override
    public int update(MappedStatement ms, Object parameterObject) throws SQLException {
        // 是否需要更新缓存
        flushCacheIfRequired(ms);
        // 执行初始化时保存的普通Executor里的方法
        return delegate.update(ms, parameterObject);
    }
    @Override
    public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {
        // 获取绑定sql信息
        BoundSql boundSql = ms.getBoundSql(parameterObject);
        // 创建缓存对象
        CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);
        return query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
    }
    @Override
    public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)
            throws SQLException {
        // 二级缓存，由于未在UserMapper.xml文件中配置<cache></cache>标签，所以返回为null
        Cache cache = ms.getCache();
        if (cache != null) {
            flushCacheIfRequired(ms);
            // 精确到sql语句的配置，是否开启使用二级缓存，默认是开启
            if (ms.isUseCache() && resultHandler == null) {
                ensureNoOutParams(ms, boundSql);
                @SuppressWarnings("unchecked")
                // 二级缓存容器获取值
                List<E> list = (List<E>) tcm.getObject(cache, key);
                // 不存在则执行sql语句查询获取，并存入二级缓存
                if (list == null) {
                    list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
                    tcm.putObject(cache, key, list); // issue #578 and #116
                }
                return list;
            }
        }
        // 执行sql语句查询获取
        return delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
    }
    // 没有缓存Statement对象，返回空集合
    @Override
    public List<BatchResult> flushStatements() throws SQLException {
        return delegate.flushStatements();
    }
    // 事务提交，将请求刷新到数据库
    @Override
    public void commit(boolean required) throws SQLException {
        delegate.commit(required);
        tcm.commit();
    }
    // 事务回滚
    @Override
    public void rollback(boolean required) throws SQLException {
        try {
            delegate.rollback(required);
        } finally {
            if (required) {
                tcm.rollback();
            }
        }
    }
    // 是否需要清除缓存
    private void flushCacheIfRequired(MappedStatement ms) {
        Cache cache = ms.getCache();
        if (cache != null && ms.isFlushCacheRequired()) {
            tcm.clear(cache);
        }
    }
}
public class SimpleExecutor extends BaseExecutor {
    // 构造方法，属性赋值
    public SimpleExecutor(Configuration configuration, Transaction transaction) {
        super(configuration, transaction);
    }
    @Override
    public int doUpdate(MappedStatement ms, Object parameter) throws SQLException {
        Statement stmt = null;
        try {
            // 获取配置类对象
            Configuration configuration = ms.getConfiguration();
            // 获取StatementHandler，内有sql执行语句对应的mappedStatement对象及PreparedStatementHandler对象
            StatementHandler handler = configuration.newStatementHandler(this, ms, parameter, RowBounds.DEFAULT, null, null);
            // 获取PreparedStatement对象
            stmt = prepareStatement(handler, ms.getStatementLog());
            // PreparedStatement执行操作
            return handler.update(stmt);
        } finally {
            // SimpleExecutor没有缓存Statement对象，每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象
            closeStatement(stmt);
        }
    }
    ......

    private Statement prepareStatement(StatementHandler handler, Log statementLog) throws SQLException {
        Statement stmt;
        // 获取数据库连接对象，并判断是否开启Debug模式（如果开启，则生成代理对象进行日志输出）
        Connection connection = getConnection(statementLog);
        // 获取预编译对象PrepareStatement
        stmt = handler.prepare(connection, transaction.getTimeout());
        // sql占位符处理，对预编译的SQL语句进行参数设置
        handler.parameterize(stmt);
        return stmt;
    }
}
public abstract class BaseExecutor implements Executor {
    protected Transaction transaction; // 事务对象
    protected Executor wrapper; // 执行器
    protected ConcurrentLinkedQueue<DeferredLoad> deferredLoads; // 延迟加载队列
    protected PerpetualCache localCache; // 一级缓存
    protected PerpetualCache localOutputParameterCache; // 存储过程相关缓存
    protected Configuration configuration; // 配置对象
    protected int queryStack; // 查询深度
    private boolean closed; // Executor关闭状态
    // 构造方法，参数初始化
    protected BaseExecutor(Configuration configuration, Transaction transaction) {
        this.transaction = transaction;
        this.deferredLoads = new ConcurrentLinkedQueue<>();
        this.localCache = new PerpetualCache("LocalCache");
        this.localOutputParameterCache = new PerpetualCache("LocalOutputParameterCache");
        this.closed = false;
        this.configuration = configuration;
        this.wrapper = this;
    }

    @Override
    public int update(MappedStatement ms, Object parameter) throws SQLException {
        ErrorContext.instance().resource(ms.getResource()).activity("executing an update").object(ms.getId());
        if (closed) {
            throw new ExecutorException("Executor was closed.");
        }
        clearLocalCache(); // 清除一级缓存
        return doUpdate(ms, parameter);
    }

    // 将请求刷新到数据库，清除缓存
    // 在Executor的实现类中，只有ReuseExecutor和BatchExecutor缓存了Statement对象，其他的Executor对doFlushStatements()进行了空实现。
    // SimpleExecutor没有缓存Statement对象，每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象
    @Override
    public List<BatchResult> flushStatements() throws SQLException {
        return flushStatements(false);
    }
    public List<BatchResult> flushStatements(boolean isRollBack) throws SQLException {
        if (closed) {
            throw new ExecutorException("Executor was closed.");
        }
        // 抽象方法，由子类实现
        return doFlushStatements(isRollBack);
    }

    @Override
    public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {
        // 获取sql语句相关信息
        BoundSql boundSql = ms.getBoundSql(parameter);
        // 创建缓存key值
        CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);
        return query(ms, parameter, rowBounds, resultHandler, key, boundSql);
    }

    @SuppressWarnings("unchecked")
    @Override
    public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {
        ErrorContext.instance().resource(ms.getResource()).activity("executing a query").object(ms.getId());
        if (closed) { // 判断Executor是否已经关闭
            throw new ExecutorException("Executor was closed.");
        }
        // 第一次查询且清除一级缓存
        if (queryStack == 0 && ms.isFlushCacheRequired()) {
            clearLocalCache();
        }
        List<E> list;
        try {
            queryStack++; // 查询深度加一
            // 从一级缓存中获取
            list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;
            if (list != null) {
                handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);
            } else {
                // 一级缓存中没有，则查询数据库
                list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);
            }
        } finally {
            queryStack--;
        }
        if (queryStack == 0) {
            // 延迟加载的相关处理
            for (DeferredLoad deferredLoad : deferredLoads) {
                deferredLoad.load();
            }
            // issue #601
            deferredLoads.clear();
            // 判断缓存级别是否为STATEMENT级别，如果是的话，清空一级缓存。
            // <setting name="localCacheScope" value="SESSION"/> 默认SESSION
            // SESSION级别：即在一个Mybatis会话中执行的所有语句，都会共享这一个缓存。
            // STATEMENT级别：缓存只对当前执行的这一个statement有效。
            if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {
                // issue #482
                clearLocalCache();
            }
        }
        return list;
    }

    @Override
    public void commit(boolean required) throws SQLException {
        if (closed) {
            throw new ExecutorException("Cannot commit, transaction is already closed");
        }
        clearLocalCache();
        flushStatements();
        if (required) {
            transaction.commit(); // 事务提及
        }
    }

    // 访问数据库，查询数据
    private <E> List<E> queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {
        List<E> list;
        // 添加缓存占位符
        localCache.putObject(key, EXECUTION_PLACEHOLDER);
        try {
            // 调抽象方法，具体执行子类（SimpleExecutor）逻辑查询数据库
            list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);
        } finally {
            // 移除缓存占位符
            localCache.removeObject(key);
        }
        // 数据存入一级缓存中
        localCache.putObject(key, list);
        // 调用存储过程相关
        if (ms.getStatementType() == StatementType.CALLABLE) {
            localOutputParameterCache.putObject(key, parameter);
        }
        return list;
    }

    // 获取数据库连接Connection对象，如果开启了debug模式，则动态代理生成有打印日志能力的Connection对象
    protected Connection getConnection(Log statementLog) throws SQLException {
        Connection connection = transaction.getConnection();
        if (statementLog.isDebugEnabled()) {
            return ConnectionLogger.newInstance(connection, statementLog, queryStack);
        } else {
            return connection;
        }
    }

}
